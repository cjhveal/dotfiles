# Load module shared by all prompts
load File.dirname(__FILE__) + '/.dotfiles/irb/rubyrc.rb'
include RubyRC

# Use AwesomePrint if avaiable
begin
  require 'rubygems'
  require 'ap'

  IRB::Irb.class_eval do
    def output_value
      ap @context.last_value
    end
  end
rescue LoadError => err
  puts "gem awesome_print not found"
end

# Load the readline module.
IRB.conf[:USE_READLINE] = true

# Remove the annoying irb(main):001:0 and replace with >>
IRB.conf[:PROMPT_MODE]  = :SIMPLE

# Tab Completion
require 'irb/completion'

# Automatic Indentation
IRB.conf[:AUTO_INDENT]=true

# Save History between irb sessions
require 'irb/ext/save-history'
IRB.conf[:SAVE_HISTORY] = 100
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.dotfiles/ruby/irb-save-history"

# Lists methods on class excluding those defined by parent classes
class Object
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end
end

# Use 'clear' or 'c' to clear the screen
def clear
  system 'clear'
end
alias c clear

# copy to clipboard
def copy(data)
  File.popen('pbcopy', 'w') { |p| p << data.to_s }
  $?.success?
end

# reload irbrc
def IRB.reload
  load __FILE__
end

# open documentation
# ri 'Array#pop' or Array.ri :pop
class Object
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = self.kind_of?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    puts `ri '#{method}'`
  end
end
